{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GitHub Pages What is this repo ? This is a collection of notes. It is a backup for Notable.app. I just use github pages for fun. Actually, I don't know how to use jekyll.","title":"Home"},{"location":"#welcome-to-github-pages","text":"","title":"Welcome to GitHub Pages"},{"location":"#what-is-this-repo","text":"This is a collection of notes. It is a backup for Notable.app. I just use github pages for fun. Actually, I don't know how to use jekyll.","title":"What is this repo?"},{"location":"notes/Basic/Github/","text":"Github w3-goto-world .gitignore echo \"site/\" >> .gitignore \u4e0b\u8f7d\u9879\u76ee\u5206\u652f git clone -b gh-pages https://github.com/ant-design/ant-design.git \u8fd8\u539f\u6587\u4ef6 git checkout -- filename.h","title":"Github"},{"location":"notes/Basic/Github/#github","text":"w3-goto-world","title":"Github"},{"location":"notes/Basic/Github/#gitignore","text":"echo \"site/\" >> .gitignore","title":".gitignore"},{"location":"notes/Basic/Github/#_1","text":"git clone -b gh-pages https://github.com/ant-design/ant-design.git","title":"\u4e0b\u8f7d\u9879\u76ee\u5206\u652f"},{"location":"notes/Basic/Github/#_2","text":"git checkout -- filename.h","title":"\u8fd8\u539f\u6587\u4ef6"},{"location":"notes/Basic/Software List/","text":"Software List Windows IObit-Uninstaller Listary Everything Mac DEVONthink 3 Blurred","title":"Software List"},{"location":"notes/Basic/Software List/#software-list","text":"","title":"Software List"},{"location":"notes/Basic/Software List/#windows","text":"IObit-Uninstaller Listary Everything","title":"Windows"},{"location":"notes/Basic/Software List/#mac","text":"DEVONthink 3 Blurred","title":"Mac"},{"location":"notes/Basic/Terminal/","text":"Terminal \u6740\u6389\u5360\u7528\u67d0\u4e2a\u7aef\u53e3\u7684\u8fdb\u7a0b lsof -i:8000 kill -9 pid MD5\u3001SHA1\u3001SHA256 Windows CertUtil -hashfile <filename> MD5 CertUtil -hashfile <filename> SHA1 CertUtil -hashfile <filename> SHA256 Mac md5 <filename> shasum -a 1 <filename> # SHA1 shasum -a 256 <filename> # SHA256","title":"Terminal"},{"location":"notes/Basic/Terminal/#terminal","text":"","title":"Terminal"},{"location":"notes/Basic/Terminal/#_1","text":"lsof -i:8000 kill -9 pid","title":"\u6740\u6389\u5360\u7528\u67d0\u4e2a\u7aef\u53e3\u7684\u8fdb\u7a0b"},{"location":"notes/Basic/Terminal/#md5sha1sha256","text":"Windows CertUtil -hashfile <filename> MD5 CertUtil -hashfile <filename> SHA1 CertUtil -hashfile <filename> SHA256 Mac md5 <filename> shasum -a 1 <filename> # SHA1 shasum -a 256 <filename> # SHA256","title":"MD5\u3001SHA1\u3001SHA256"},{"location":"notes/Basic/\u6b63\u5219\u8868\u8fbe\u5f0f/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"notes/Basic/\u6b63\u5219\u8868\u8fbe\u5f0f/#_1","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"notes/Basic/\u7aef\u53e3\u53f7/","text":"\u7aef\u53e3\u53f7 \u534f\u8bae \u7aef\u53e3 SSH 22","title":"\u7aef\u53e3\u53f7"},{"location":"notes/Basic/\u7aef\u53e3\u53f7/#_1","text":"\u534f\u8bae \u7aef\u53e3 SSH 22","title":"\u7aef\u53e3\u53f7"},{"location":"notes/Boost/Boost TCP Tutorial/","text":"Boost TCP Tutorial \u6700\u8fd1\u8981\u5199\u4e00\u4e2aTCP\u7684\u670d\u52a1\uff0c\u6240\u4ee5\u53c8\u91cd\u65b0\u5b66\u4e60\u4e86\u4e00\u904d boost\u5b98\u7f51 \u7684\u6559\u7a0b Daytime.1 - A synchronous TCP daytime client \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684TCP Client\uff0c\u8fde\u63a5\u5230TCP Server\u4e4b\u540e\uff0c\u4f1a\u6536\u5230\u4e00\u4e2aTCP Server\u53d1\u6765\u7684\u65f6\u95f4\uff0c\u4e00\u76f4\u7b49\u5f85TCP Server\u53d1\u9001\u3002 #include <QCoreApplication> #include <iostream> #include <boost/array.hpp> #include <boost/asio.hpp> #include <string> #include <iostream> using boost :: asio :: ip :: tcp ; int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); // io_service boost :: asio :: io_service io_service ; // \u5efa\u7acb\u4e00\u4e2asocket tcp :: socket socket ( io_service ); // \u670d\u52a1\u7aef\u7684\u5730\u5740\u548c\u7aef\u53e3 std :: string address = \"192.168.0.102\" ; unsigned short port = 8898 ; tcp :: endpoint endpoint ( boost :: asio :: ip :: address :: from_string ( address ), port ); // socket\u8fde\u63a5\u5230endpoint socket . connect ( endpoint ); for (;;) { boost :: array < char , 128 > buf ; boost :: system :: error_code error ; // \u540c\u6b65\u8bfb\u53d6Server\u53d1\u6765\u7684\u6d88\u606f\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u4f1a\u4e00\u76f4\u963b\u585e\u5728\u6b64 size_t len = socket . read_some ( boost :: asio :: buffer ( buf ), error ); // \u5728\u547d\u4ee4\u884c\u8f93\u51fa\u6536\u5230\u7684\u6d88\u606f std :: cout . write ( buf . data (), len ); } return a . exec (); } \u4ece\u4e0a\u9762\ud83d\udc46\u7684\u4ee3\u7801\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u7b80\u5355\u7684TCP Client\u7a0b\u5e8f\u9700\u8981\u4e00\u4e2aio_service\uff0c\u4e00\u4e2asocket\uff0c\u4e00\u4e2aendpoint\u3002 Daytime.2 - A synchronous TCP daytime server \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684TCP Server\uff0c\u7b49\u5f85\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u7136\u540e\u53d1\u9001\u5f53\u524d\u65f6\u95f4\uff0c\u7ee7\u7eed\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fde\u63a5\u3002 #include <QCoreApplication> #include <ctime> #include <iostream> #include <string> #include <boost/asio.hpp> using boost :: asio :: ip :: tcp ; // \u8fd4\u56de\u5f53\u524d\u7684\u65f6\u95f4 std :: string make_daytime_string () { using namespace std ; // For time_t, time and ctime; time_t now = time ( 0 ); return ctime ( & now ); } int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); // io_service boost :: asio :: io_service io_service ; // acceptor tcp :: acceptor acceptor ( io_service , tcp :: endpoint ( tcp :: v4 (), 8898 )); for (;;) { // socket tcp :: socket socket ( io_service ); // \u9996\u5148\u4f1a\u963b\u585e\u5728\u8fd9\u91cc acceptor . accept ( socket ); // \u5f53\u524d\u65f6\u95f4 std :: string message = make_daytime_string (); boost :: system :: error_code ignored_error ; boost :: asio :: write ( socket , boost :: asio :: buffer ( message ), ignored_error ); } return a . exec (); } \u4ece\u4e0a\u9762\ud83d\udc46\u7684\u4ee3\u7801\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u8981\u5199\u4e00\u4e2aTCP Server\uff0c\u9664\u4e86\u548cTCP Client\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u4e00\u4e2aacceptor\u3002 Daytime Client \u548c Daytime Server Improved \u4e0a\u9762\u7684\u7a0b\u5e8f\u6700\u7ec8\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u662f\uff0c\u5148\u542f\u52a8\u4e00\u4e2aTCP Server\uff0c\u63a5\u7740\u8fd0\u884c\u4e00\u4e2aTCP Client\uff0c\u63a5\u7740TCP Client\u4f1a\u6536\u5230\u4e00\u4e2a\u65f6\u95f4\uff1b\u518d\u542f\u52a8\u7ed9\u4e00\u4e2aTCP Client\u8fd8\u662f\u540c\u6837\u7684\u7ed3\u679c\u3002\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\u591a\u4e2aTCP Client\uff0c\u4f46\u662f\u4e0d\u80fd\u5b58\u5728\u591a\u4e2aTCP Server\uff0c\u56e0\u4e3a\u6bcf\u4e2aTCP Server\u90fd\u8981\u5360\u7528\u4e00\u4e2aTCP\u7684\u7aef\u53e3\u3002 \u73b0\u5728\u6211\u4eec\u4fee\u6539TCP Server\u7684\u7a0b\u5e8f\uff0c\u8ba9TCP Server\u80fd\u591f\u5411Client\u53d1\u9001\u591a\u6b21\u65f6\u95f4\u3002 #include <QCoreApplication> #include <ctime> #include <iostream> #include <string> #include <boost/asio.hpp> using boost :: asio :: ip :: tcp ; std :: string make_daytime_string () { using namespace std ; // For time_t, time and ctime; time_t now = time ( 0 ); return ctime ( & now ); } int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); try { boost :: asio :: io_service io_service ; tcp :: acceptor acceptor ( io_service , tcp :: endpoint ( tcp :: v4 (), 8898 )); tcp :: socket socket ( io_service ); // \u6ca1\u6709Client\u8fde\u63a5\u65f6\uff0c\u4f1a\u5148\u963b\u585e\u5728\u8fd9\u91cc acceptor . accept ( socket ); int i ; printf ( \"breakpoint \\n \" ); // \u6709\u4e86Client\u8fde\u63a5\u4e4b\u540e\uff0c\u4f1a\u963b\u585e\u5728\u8fd9\u91cc while ( scanf ( \"%d\" , & i ) != - 1 ) { printf ( \"make day time \\n \" ); std :: string message = make_daytime_string (); boost :: system :: error_code ignored_error ; socket . write_some ( boost :: asio :: buffer ( message ), ignored_error ); } } catch ( std :: exception & e ) { std :: cerr << e . what () << std :: endl ; } return a . exec (); } \u5f53TCP Server\u6539\u6210\u4e0a\u9762\u7684\u4ee3\u7801\u4e4b\u540e\uff0cServer\u7aef\u968f\u4fbf\u8f93\u5165\u4ec0\u4e48\uff0c\u90fd\u4f1a\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u65f6\u95f4\u3002\u4f46\u662f\u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u80fd\u7ef4\u6301\u4e00\u4e2a\u8fde\u63a5\uff0c\u4e00\u65e6\u6709TCP Client\u8fde\u63a5\u4e0a\u4e4b\u540e\uff0c\u5c31\u4e0d\u80fd\u6709\u5176\u4ed6\u7684Client\u8fde\u63a5\u4e86\u3002 \u6211\u4eec\u6700\u7ec8\u7684\u76ee\u6807\u662fServer\u4e00\u76f4\u542f\u52a8\u5728\u90a3\u91cc\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u4e4b\u540e\uff0c\u4f1a\u7acb\u5373\u6536\u5230\u5f53\u524d\u65f6\u95f4\uff0c\u518d\u8bf7\u6c42\u4e4b\u540e\uff0c\u8fd8\u662f\u4f1a\u6536\u5230\u65f6\u95f4\uff1b\u5982\u679c\u540c\u65f6\u518d\u542f\u52a8\u4e00\u4e2aClient\u8fd8\u662f\u4f1a\u6709\u540c\u6837\u7684\u6548\u679c\u3002\u663e\u7136\uff0c\u6839\u636e\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u65e0\u6cd5\u6539\u5199\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u6211\u4eec\u7ee7\u7eed\u5b66\u4e60\u5b98\u7f51\u7684\u6559\u7a0b\uff0c\u63a5\u4e0b\u6765\u5e94\u8be5\u5230\u5f02\u6b65\u53d1\u9001\u548c\u63a5\u6536\u4e86\u3002 Daytime.3 - An asynchronous TCP daytime server #include <QCoreApplication> #include <ctime> #include <iostream> #include <string> #include <boost/bind.hpp> #include <boost/shared_ptr.hpp> #include <boost/enable_shared_from_this.hpp> #include <boost/asio.hpp> #include <boost/make_shared.hpp> using boost :: asio :: ip :: tcp ; // retrun current time std :: string make_daytime_string () { using namespace std ; // For time_t, time and ctime; time_t now = time ( 0 ); return ctime ( & now ); } // each connection containing a socket class tcp_connection : public boost :: enable_shared_from_this < tcp_connection > { public : typedef boost :: shared_ptr < tcp_connection > pointer ; tcp_connection ( boost :: asio :: io_service & io_service ) : socket_ ( io_service ) { } // GET\u63a5\u53e3\uff0c\u8fd4\u56desocket tcp :: socket & socket () { return socket_ ; } // public \u63a5\u53e3\uff0c\u7528socket\u63a5\u53e3\u7ed9\u5bf9\u65b9\u53d1\u9001\u5f53\u524d\u65f6\u95f4 void start () { std :: cout << \"handle write\" << std :: endl ; message_ = make_daytime_string (); socket_ . async_write_some ( boost :: asio :: buffer ( message_ ), boost :: bind ( & tcp_connection :: handle_write , this , boost :: asio :: placeholders :: error , boost :: asio :: placeholders :: bytes_transferred )); } private : // async_write_some\u7684\u56de\u6389\u51fd\u6570 void handle_write ( const boost :: system :: error_code & ec , size_t bytes_transferred ) { std :: cout << \"handle write\" << std :: endl ; } tcp :: socket socket_ ; std :: string message_ ; }; // TCP Server\u7c7b class tcp_server { public : tcp_server ( boost :: asio :: io_service & io_service ) : acceptor_ ( io_service , tcp :: endpoint ( tcp :: v4 (), 8898 )) { start_accept (); } private : // \u6784\u9020\u51fd\u6570\u8c03\u7528\uff0cacceptor\u5f02\u6b65\u63a5\u6536\u8fde\u63a5 void start_accept () { std :: cout << \"start accept\" << std :: endl ; tcp_connection :: pointer connection_ptr = boost :: make_shared < tcp_connection > ( acceptor_ . get_io_service ()); acceptor_ . async_accept ( connection_ptr -> socket (), boost :: bind ( & tcp_server :: handle_accept , this , connection_ptr , boost :: asio :: placeholders :: error )); } // acceptor\u5f02\u6b65\u63a5\u6536\u7684\u56de\u6389\u51fd\u6570 void handle_accept ( tcp_connection :: pointer connection , const boost :: system :: error_code & ec ) { std :: cout << \"start handle accept\" << std :: endl ; if ( ! ec ) { // \u53d1\u9001 connection -> start (); } start_accept (); } // acceptor tcp :: acceptor acceptor_ ; }; int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); try { boost :: asio :: io_service io_service ; tcp_server server ( io_service ); io_service . run (); } catch ( std :: exception & e ) { std :: cout << e . what () << std :: endl ; } return a . exec (); } \u7b2c\u4e00\u6b21\u770b\u4e0a\u9762\ud83d\udc46\u7684\u4ee3\u7801\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u611f\u89c9\u6bd4\u8f83\u56f0\u96be\uff0c\u6bd5\u7adf\u4ee5\u524d\u660e\u660e\u53ea\u6709\u4e00\u4e2a\u7c7b\u7684\u554a\uff0c\u800c\u4e14\u76f4\u63a5\u8df3\u5230\u4e86Server\uff0cClient\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5b9e\u73b0\u7684\u4f8b\u5b50\u3002 \u9996\u5148tcp_server\u662f\u4e3b\u8981\u7684\u7c7b\uff0c\u7ef4\u62a4\u4e86\u4e00\u4e2aacceptor\uff1btcp_connection\u8868\u793a\u6bcf\u4e00\u4e2a\u8fde\u63a5\uff0c\u91cc\u9762\u7ef4\u62a4\u4e86\u4e00\u4e2ascoket\u3002acceptor\u6bcf\u6b21accept\u4e4b\u524d\u90fd\u4f1anew \u4e00\u4e2atcp_connection\uff0c\u7136\u540e\u5728handle_accept\u91cc\u7528tcp_connection\u64cd\u4f5csocket\u53d1\u9001\u6216\u8005\u63a5\u6536\u3002","title":"Boost TCP Tutorial"},{"location":"notes/Boost/Boost TCP Tutorial/#boost-tcp-tutorial","text":"\u6700\u8fd1\u8981\u5199\u4e00\u4e2aTCP\u7684\u670d\u52a1\uff0c\u6240\u4ee5\u53c8\u91cd\u65b0\u5b66\u4e60\u4e86\u4e00\u904d boost\u5b98\u7f51 \u7684\u6559\u7a0b","title":"Boost TCP Tutorial"},{"location":"notes/Boost/Boost TCP Tutorial/#daytime1-a-synchronous-tcp-daytime-client","text":"\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684TCP Client\uff0c\u8fde\u63a5\u5230TCP Server\u4e4b\u540e\uff0c\u4f1a\u6536\u5230\u4e00\u4e2aTCP Server\u53d1\u6765\u7684\u65f6\u95f4\uff0c\u4e00\u76f4\u7b49\u5f85TCP Server\u53d1\u9001\u3002 #include <QCoreApplication> #include <iostream> #include <boost/array.hpp> #include <boost/asio.hpp> #include <string> #include <iostream> using boost :: asio :: ip :: tcp ; int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); // io_service boost :: asio :: io_service io_service ; // \u5efa\u7acb\u4e00\u4e2asocket tcp :: socket socket ( io_service ); // \u670d\u52a1\u7aef\u7684\u5730\u5740\u548c\u7aef\u53e3 std :: string address = \"192.168.0.102\" ; unsigned short port = 8898 ; tcp :: endpoint endpoint ( boost :: asio :: ip :: address :: from_string ( address ), port ); // socket\u8fde\u63a5\u5230endpoint socket . connect ( endpoint ); for (;;) { boost :: array < char , 128 > buf ; boost :: system :: error_code error ; // \u540c\u6b65\u8bfb\u53d6Server\u53d1\u6765\u7684\u6d88\u606f\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u4f1a\u4e00\u76f4\u963b\u585e\u5728\u6b64 size_t len = socket . read_some ( boost :: asio :: buffer ( buf ), error ); // \u5728\u547d\u4ee4\u884c\u8f93\u51fa\u6536\u5230\u7684\u6d88\u606f std :: cout . write ( buf . data (), len ); } return a . exec (); } \u4ece\u4e0a\u9762\ud83d\udc46\u7684\u4ee3\u7801\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u7b80\u5355\u7684TCP Client\u7a0b\u5e8f\u9700\u8981\u4e00\u4e2aio_service\uff0c\u4e00\u4e2asocket\uff0c\u4e00\u4e2aendpoint\u3002","title":"Daytime.1 - A synchronous TCP daytime client"},{"location":"notes/Boost/Boost TCP Tutorial/#daytime2-a-synchronous-tcp-daytime-server","text":"\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684TCP Server\uff0c\u7b49\u5f85\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u7136\u540e\u53d1\u9001\u5f53\u524d\u65f6\u95f4\uff0c\u7ee7\u7eed\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fde\u63a5\u3002 #include <QCoreApplication> #include <ctime> #include <iostream> #include <string> #include <boost/asio.hpp> using boost :: asio :: ip :: tcp ; // \u8fd4\u56de\u5f53\u524d\u7684\u65f6\u95f4 std :: string make_daytime_string () { using namespace std ; // For time_t, time and ctime; time_t now = time ( 0 ); return ctime ( & now ); } int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); // io_service boost :: asio :: io_service io_service ; // acceptor tcp :: acceptor acceptor ( io_service , tcp :: endpoint ( tcp :: v4 (), 8898 )); for (;;) { // socket tcp :: socket socket ( io_service ); // \u9996\u5148\u4f1a\u963b\u585e\u5728\u8fd9\u91cc acceptor . accept ( socket ); // \u5f53\u524d\u65f6\u95f4 std :: string message = make_daytime_string (); boost :: system :: error_code ignored_error ; boost :: asio :: write ( socket , boost :: asio :: buffer ( message ), ignored_error ); } return a . exec (); } \u4ece\u4e0a\u9762\ud83d\udc46\u7684\u4ee3\u7801\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u8981\u5199\u4e00\u4e2aTCP Server\uff0c\u9664\u4e86\u548cTCP Client\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u4e00\u4e2aacceptor\u3002","title":"Daytime.2 - A synchronous TCP daytime server"},{"location":"notes/Boost/Boost TCP Tutorial/#daytime-client-daytime-server-improved","text":"\u4e0a\u9762\u7684\u7a0b\u5e8f\u6700\u7ec8\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u662f\uff0c\u5148\u542f\u52a8\u4e00\u4e2aTCP Server\uff0c\u63a5\u7740\u8fd0\u884c\u4e00\u4e2aTCP Client\uff0c\u63a5\u7740TCP Client\u4f1a\u6536\u5230\u4e00\u4e2a\u65f6\u95f4\uff1b\u518d\u542f\u52a8\u7ed9\u4e00\u4e2aTCP Client\u8fd8\u662f\u540c\u6837\u7684\u7ed3\u679c\u3002\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\u591a\u4e2aTCP Client\uff0c\u4f46\u662f\u4e0d\u80fd\u5b58\u5728\u591a\u4e2aTCP Server\uff0c\u56e0\u4e3a\u6bcf\u4e2aTCP Server\u90fd\u8981\u5360\u7528\u4e00\u4e2aTCP\u7684\u7aef\u53e3\u3002 \u73b0\u5728\u6211\u4eec\u4fee\u6539TCP Server\u7684\u7a0b\u5e8f\uff0c\u8ba9TCP Server\u80fd\u591f\u5411Client\u53d1\u9001\u591a\u6b21\u65f6\u95f4\u3002 #include <QCoreApplication> #include <ctime> #include <iostream> #include <string> #include <boost/asio.hpp> using boost :: asio :: ip :: tcp ; std :: string make_daytime_string () { using namespace std ; // For time_t, time and ctime; time_t now = time ( 0 ); return ctime ( & now ); } int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); try { boost :: asio :: io_service io_service ; tcp :: acceptor acceptor ( io_service , tcp :: endpoint ( tcp :: v4 (), 8898 )); tcp :: socket socket ( io_service ); // \u6ca1\u6709Client\u8fde\u63a5\u65f6\uff0c\u4f1a\u5148\u963b\u585e\u5728\u8fd9\u91cc acceptor . accept ( socket ); int i ; printf ( \"breakpoint \\n \" ); // \u6709\u4e86Client\u8fde\u63a5\u4e4b\u540e\uff0c\u4f1a\u963b\u585e\u5728\u8fd9\u91cc while ( scanf ( \"%d\" , & i ) != - 1 ) { printf ( \"make day time \\n \" ); std :: string message = make_daytime_string (); boost :: system :: error_code ignored_error ; socket . write_some ( boost :: asio :: buffer ( message ), ignored_error ); } } catch ( std :: exception & e ) { std :: cerr << e . what () << std :: endl ; } return a . exec (); } \u5f53TCP Server\u6539\u6210\u4e0a\u9762\u7684\u4ee3\u7801\u4e4b\u540e\uff0cServer\u7aef\u968f\u4fbf\u8f93\u5165\u4ec0\u4e48\uff0c\u90fd\u4f1a\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u65f6\u95f4\u3002\u4f46\u662f\u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u80fd\u7ef4\u6301\u4e00\u4e2a\u8fde\u63a5\uff0c\u4e00\u65e6\u6709TCP Client\u8fde\u63a5\u4e0a\u4e4b\u540e\uff0c\u5c31\u4e0d\u80fd\u6709\u5176\u4ed6\u7684Client\u8fde\u63a5\u4e86\u3002 \u6211\u4eec\u6700\u7ec8\u7684\u76ee\u6807\u662fServer\u4e00\u76f4\u542f\u52a8\u5728\u90a3\u91cc\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u4e4b\u540e\uff0c\u4f1a\u7acb\u5373\u6536\u5230\u5f53\u524d\u65f6\u95f4\uff0c\u518d\u8bf7\u6c42\u4e4b\u540e\uff0c\u8fd8\u662f\u4f1a\u6536\u5230\u65f6\u95f4\uff1b\u5982\u679c\u540c\u65f6\u518d\u542f\u52a8\u4e00\u4e2aClient\u8fd8\u662f\u4f1a\u6709\u540c\u6837\u7684\u6548\u679c\u3002\u663e\u7136\uff0c\u6839\u636e\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u65e0\u6cd5\u6539\u5199\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u6211\u4eec\u7ee7\u7eed\u5b66\u4e60\u5b98\u7f51\u7684\u6559\u7a0b\uff0c\u63a5\u4e0b\u6765\u5e94\u8be5\u5230\u5f02\u6b65\u53d1\u9001\u548c\u63a5\u6536\u4e86\u3002","title":"Daytime Client \u548c Daytime Server Improved"},{"location":"notes/Boost/Boost TCP Tutorial/#daytime3-an-asynchronous-tcp-daytime-server","text":"#include <QCoreApplication> #include <ctime> #include <iostream> #include <string> #include <boost/bind.hpp> #include <boost/shared_ptr.hpp> #include <boost/enable_shared_from_this.hpp> #include <boost/asio.hpp> #include <boost/make_shared.hpp> using boost :: asio :: ip :: tcp ; // retrun current time std :: string make_daytime_string () { using namespace std ; // For time_t, time and ctime; time_t now = time ( 0 ); return ctime ( & now ); } // each connection containing a socket class tcp_connection : public boost :: enable_shared_from_this < tcp_connection > { public : typedef boost :: shared_ptr < tcp_connection > pointer ; tcp_connection ( boost :: asio :: io_service & io_service ) : socket_ ( io_service ) { } // GET\u63a5\u53e3\uff0c\u8fd4\u56desocket tcp :: socket & socket () { return socket_ ; } // public \u63a5\u53e3\uff0c\u7528socket\u63a5\u53e3\u7ed9\u5bf9\u65b9\u53d1\u9001\u5f53\u524d\u65f6\u95f4 void start () { std :: cout << \"handle write\" << std :: endl ; message_ = make_daytime_string (); socket_ . async_write_some ( boost :: asio :: buffer ( message_ ), boost :: bind ( & tcp_connection :: handle_write , this , boost :: asio :: placeholders :: error , boost :: asio :: placeholders :: bytes_transferred )); } private : // async_write_some\u7684\u56de\u6389\u51fd\u6570 void handle_write ( const boost :: system :: error_code & ec , size_t bytes_transferred ) { std :: cout << \"handle write\" << std :: endl ; } tcp :: socket socket_ ; std :: string message_ ; }; // TCP Server\u7c7b class tcp_server { public : tcp_server ( boost :: asio :: io_service & io_service ) : acceptor_ ( io_service , tcp :: endpoint ( tcp :: v4 (), 8898 )) { start_accept (); } private : // \u6784\u9020\u51fd\u6570\u8c03\u7528\uff0cacceptor\u5f02\u6b65\u63a5\u6536\u8fde\u63a5 void start_accept () { std :: cout << \"start accept\" << std :: endl ; tcp_connection :: pointer connection_ptr = boost :: make_shared < tcp_connection > ( acceptor_ . get_io_service ()); acceptor_ . async_accept ( connection_ptr -> socket (), boost :: bind ( & tcp_server :: handle_accept , this , connection_ptr , boost :: asio :: placeholders :: error )); } // acceptor\u5f02\u6b65\u63a5\u6536\u7684\u56de\u6389\u51fd\u6570 void handle_accept ( tcp_connection :: pointer connection , const boost :: system :: error_code & ec ) { std :: cout << \"start handle accept\" << std :: endl ; if ( ! ec ) { // \u53d1\u9001 connection -> start (); } start_accept (); } // acceptor tcp :: acceptor acceptor_ ; }; int main ( int argc , char * argv []) { QCoreApplication a ( argc , argv ); try { boost :: asio :: io_service io_service ; tcp_server server ( io_service ); io_service . run (); } catch ( std :: exception & e ) { std :: cout << e . what () << std :: endl ; } return a . exec (); } \u7b2c\u4e00\u6b21\u770b\u4e0a\u9762\ud83d\udc46\u7684\u4ee3\u7801\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u611f\u89c9\u6bd4\u8f83\u56f0\u96be\uff0c\u6bd5\u7adf\u4ee5\u524d\u660e\u660e\u53ea\u6709\u4e00\u4e2a\u7c7b\u7684\u554a\uff0c\u800c\u4e14\u76f4\u63a5\u8df3\u5230\u4e86Server\uff0cClient\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5b9e\u73b0\u7684\u4f8b\u5b50\u3002 \u9996\u5148tcp_server\u662f\u4e3b\u8981\u7684\u7c7b\uff0c\u7ef4\u62a4\u4e86\u4e00\u4e2aacceptor\uff1btcp_connection\u8868\u793a\u6bcf\u4e00\u4e2a\u8fde\u63a5\uff0c\u91cc\u9762\u7ef4\u62a4\u4e86\u4e00\u4e2ascoket\u3002acceptor\u6bcf\u6b21accept\u4e4b\u524d\u90fd\u4f1anew \u4e00\u4e2atcp_connection\uff0c\u7136\u540e\u5728handle_accept\u91cc\u7528tcp_connection\u64cd\u4f5csocket\u53d1\u9001\u6216\u8005\u63a5\u6536\u3002","title":"Daytime.3 - An asynchronous TCP daytime server"},{"location":"notes/Boost/Timer/","text":"Timer Single boost::asio::ip::tcp::endpoint using boost :: asio :: ip :: tcp ; tcp :: endpoint endpoint ( boost :: asio :: ip :: address :: from_string ( address ), port ); \u963b\u585e\u8ba1\u65f65\u79d2","title":"Timer"},{"location":"notes/Boost/Timer/#timer","text":"","title":"Timer"},{"location":"notes/Boost/Timer/#single","text":"","title":"Single"},{"location":"notes/Boost/Timer/#boostasioiptcpendpoint","text":"using boost :: asio :: ip :: tcp ; tcp :: endpoint endpoint ( boost :: asio :: ip :: address :: from_string ( address ), port );","title":"boost::asio::ip::tcp::endpoint"},{"location":"notes/Boost/Timer/#5","text":"","title":"\u963b\u585e\u8ba1\u65f65\u79d2"},{"location":"notes/C++/C++\ud83e\udd19map/","text":"C++ map <QString, vector <ClassType> > \u5b9a\u4e49 key\u662f\u5426\u5b58\u5728 if ( _map . count ( key ) == 1 ) { // exists} if ( _map . count ( key ) == 0 ) { // doesn't exist}","title":"C++\ud83e\udd19map"},{"location":"notes/C++/C++\ud83e\udd19map/#cmap","text":"<QString, vector <ClassType> >","title":"C++map"},{"location":"notes/C++/C++\ud83e\udd19map/#_1","text":"","title":"\u5b9a\u4e49"},{"location":"notes/C++/C++\ud83e\udd19map/#key","text":"if ( _map . count ( key ) == 1 ) { // exists} if ( _map . count ( key ) == 0 ) { // doesn't exist}","title":"key\u662f\u5426\u5b58\u5728"},{"location":"notes/C++/C++\ud83e\udd19vector/","text":"C++ vector vector\u67e5\u627e\u5143\u7d20 std :: vector < int > arr = { 5 , 4 , 3 , 2 , 1 }; int ele = 1 ; std :: vector < int >:: iterator result = std :: find ( arr . begin (), arr . end (), ele ); if ( result != arr . end ()) { for ( std :: vector < int >:: iterator it = arr . begin (); it != result ; it ++ ) { std :: cout << * it << \" \" ; } std :: cout << std :: endl ; for ( std :: vector < int >:: iterator it = result + 1 ; it != arr . end (); it ++ ) { std :: cout << * it << \" \" ; } std :: cout << std :: endl ; } sub vector < T >:: const_iterator first = myVec . begin () + 100000 ; vector < T >:: const_iterator last = myVec . begin () + 101000 ; vector < T > newVec ( first , last ); front l","title":"C++\ud83e\udd19vector"},{"location":"notes/C++/C++\ud83e\udd19vector/#cvector","text":"vector\u67e5\u627e\u5143\u7d20 std :: vector < int > arr = { 5 , 4 , 3 , 2 , 1 }; int ele = 1 ; std :: vector < int >:: iterator result = std :: find ( arr . begin (), arr . end (), ele ); if ( result != arr . end ()) { for ( std :: vector < int >:: iterator it = arr . begin (); it != result ; it ++ ) { std :: cout << * it << \" \" ; } std :: cout << std :: endl ; for ( std :: vector < int >:: iterator it = result + 1 ; it != arr . end (); it ++ ) { std :: cout << * it << \" \" ; } std :: cout << std :: endl ; } sub vector < T >:: const_iterator first = myVec . begin () + 100000 ; vector < T >:: const_iterator last = myVec . begin () + 101000 ; vector < T > newVec ( first , last ); front l","title":"C++vector"},{"location":"notes/C++/C++\ud83e\udd19\u7ed3\u6784\u4f53/","text":"C++ \u7ed3\u6784\u4f53 struct StudentClassInfo { }; typedef boost :: shared_ptr < StudentClassInfo > StudentClassInfoPtr ; StudentClassInfoPtr classInfo = boost :: make_shared < StudentClassInfo > ();","title":"C++\ud83e\udd19\u7ed3\u6784\u4f53"},{"location":"notes/C++/C++\ud83e\udd19\u7ed3\u6784\u4f53/#c","text":"struct StudentClassInfo { }; typedef boost :: shared_ptr < StudentClassInfo > StudentClassInfoPtr ; StudentClassInfoPtr classInfo = boost :: make_shared < StudentClassInfo > ();","title":"C++\u7ed3\u6784\u4f53"},{"location":"notes/C++/\u7c7b\u578b\u8f6c\u6362/","text":"\u7c7b\u578b\u8f6c\u6362 std::string & QString std::string -> QString std :: string target = QString :: fromStdString ( source ); QString & int QString -> int QString source = \"12\" ; int target = source . toInt (); QString -> QDateTime QString strBuffer ; QDateTime time ; strBuffer = \"2010-07-02 17:35:00\" ; time = QDateTime :: fromString ( strBuffer , \"yyyy-MM-dd hh:mm:ss\" );","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"notes/C++/\u7c7b\u578b\u8f6c\u6362/#_1","text":"std::string & QString std::string -> QString std :: string target = QString :: fromStdString ( source ); QString & int QString -> int QString source = \"12\" ; int target = source . toInt ();","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"notes/C++/\u7c7b\u578b\u8f6c\u6362/#qstring-qdatetime","text":"QString strBuffer ; QDateTime time ; strBuffer = \"2010-07-02 17:35:00\" ; time = QDateTime :: fromString ( strBuffer , \"yyyy-MM-dd hh:mm:ss\" );","title":"QString -&gt; QDateTime"},{"location":"notes/C++/\ud83d\udcafRapidJson/","text":"RapidJson \u4e2d\u6587\u5b57\u7b26\u4e32 Code std :: string hello = \"\u4f60\u597d\" ; // \u7f16\u7801\u8f6c\u6362\u53ef\u7701\u7565 hello = CodeToCode :: GBKToUTF8 ( QString :: fromStdString ( hello )). toStdString (); Value strContent ( kStringType ); strContent . SetString ( hello . c_str (), allocator ); root . AddMember ( \"Status\" , strContent , allocator );","title":"\ud83d\udcafRapidJson"},{"location":"notes/C++/\ud83d\udcafRapidJson/#rapidjson","text":"","title":"RapidJson"},{"location":"notes/C++/\ud83d\udcafRapidJson/#_1","text":"Code std :: string hello = \"\u4f60\u597d\" ; // \u7f16\u7801\u8f6c\u6362\u53ef\u7701\u7565 hello = CodeToCode :: GBKToUTF8 ( QString :: fromStdString ( hello )). toStdString (); Value strContent ( kStringType ); strContent . SetString ( hello . c_str (), allocator ); root . AddMember ( \"Status\" , strContent , allocator );","title":"\u4e2d\u6587\u5b57\u7b26\u4e32"},{"location":"notes/FullStack/JS-Array/","text":"JS-Array sort const heights = new Array ( 9 , 8 , 7 , 6 , 5 , 4 ); heights . sort (( a , b ) => { return a <= b ? - 1 : 1 }); \u589e const arr = new Array (); arr . push ( 9 ); // [9] arr . push ( 10 ); // [9, 10]","title":"JS-Array"},{"location":"notes/FullStack/JS-Array/#js-array","text":"","title":"JS-Array"},{"location":"notes/FullStack/JS-Array/#sort","text":"const heights = new Array ( 9 , 8 , 7 , 6 , 5 , 4 ); heights . sort (( a , b ) => { return a <= b ? - 1 : 1 });","title":"sort"},{"location":"notes/FullStack/JS-Array/#_1","text":"const arr = new Array (); arr . push ( 9 ); // [9] arr . push ( 10 ); // [9, 10]","title":"\u589e"},{"location":"notes/FullStack/JS-Fetch/","text":"JS-Fetch npm i node-fetch --save const fetch = require(\"node-fetch\");","title":"JS-Fetch"},{"location":"notes/FullStack/JS-Fetch/#js-fetch","text":"npm i node-fetch --save const fetch = require(\"node-fetch\");","title":"JS-Fetch"},{"location":"notes/FullStack/JS-Numbers/","text":"JS-Numbers .toString() Number.parseInt(string,[ radix ]) string The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). Leading whitespace in the string argument is ignored. radix An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string.","title":"JS-Numbers"},{"location":"notes/FullStack/JS-Numbers/#js-numbers","text":".toString() Number.parseInt(string,[ radix ]) string The value to parse. If the string argument is not a string, then it is converted to a string (using the ToString abstract operation). Leading whitespace in the string argument is ignored. radix An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string.","title":"JS-Numbers"},{"location":"notes/FullStack/JS-String/","text":"JS-String Props .length \"Nice!\" . length ; // 5 .includes(searchString) \"Hello World\" . includes ( \"World\" ); // true \"Hello World\" . includes ( \"Potato\" ); // false .toUpperCase() \"hello\" . toUpperCase (); // \"HELLO\" .toLowerCase() \"NICe\" . toLowerCase (); // \"nice\"; substring(indexStart, indexEnd) * indexStart: the position of the first character you'd like to include * indexEnd: \u53ef\u7701\u7565\uff0cthe position of the first character you'd like to ignore const language = \"JavaScript\" ; language . substring ( 1 , 4 ); //\"ava\" language . substring ( 4 ); //\"Script\" Template strings `This is a multiline string that just works!` `I am learning ${ language } ` ; .startsWith(serchString) .endsWith(searchString) const phoneNumber = \"+103123456\" ; phoneNumber . startsWith ( \"+\" ); //true phoneNumber . startsWith ( \"10\" ); //false phoneNumber . endsWith ( \"56\" ); // true .trim() var greeting = ' Hello world! ' ; console . log ( greeting . trim ()); // expected output: \"Hello world!\";","title":"JS-String"},{"location":"notes/FullStack/JS-String/#js-string","text":"","title":"JS-String"},{"location":"notes/FullStack/JS-String/#props","text":".length \"Nice!\" . length ; // 5 .includes(searchString) \"Hello World\" . includes ( \"World\" ); // true \"Hello World\" . includes ( \"Potato\" ); // false .toUpperCase() \"hello\" . toUpperCase (); // \"HELLO\" .toLowerCase() \"NICe\" . toLowerCase (); // \"nice\"; substring(indexStart, indexEnd) * indexStart: the position of the first character you'd like to include * indexEnd: \u53ef\u7701\u7565\uff0cthe position of the first character you'd like to ignore const language = \"JavaScript\" ; language . substring ( 1 , 4 ); //\"ava\" language . substring ( 4 ); //\"Script\" Template strings `This is a multiline string that just works!` `I am learning ${ language } ` ; .startsWith(serchString) .endsWith(searchString) const phoneNumber = \"+103123456\" ; phoneNumber . startsWith ( \"+\" ); //true phoneNumber . startsWith ( \"10\" ); //false phoneNumber . endsWith ( \"56\" ); // true .trim() var greeting = ' Hello world! ' ; console . log ( greeting . trim ()); // expected output: \"Hello world!\";","title":"Props"},{"location":"notes/FullStack/JS-Types/","text":"JS-Types number string boolean null undefined object symbol object\u62f7\u8d1d\u5f15\u7528\uff0c\u5176\u4ed6\u90fd\u662f\u62f7\u8d1d\u503c","title":"JS-Types"},{"location":"notes/FullStack/JS-Types/#js-types","text":"number string boolean null undefined object symbol object\u62f7\u8d1d\u5f15\u7528\uff0c\u5176\u4ed6\u90fd\u662f\u62f7\u8d1d\u503c","title":"JS-Types"},{"location":"notes/FullStack/JS-\u6ce8\u91ca/","text":"JS-\u6ce8\u91ca /** * @param {string} name */ function getNameLength ( name ){ return name . length ; }","title":"JS-\u6ce8\u91ca"},{"location":"notes/FullStack/JS-\u6ce8\u91ca/#js-","text":"/** * @param {string} name */ function getNameLength ( name ){ return name . length ; }","title":"JS-\u6ce8\u91ca"},{"location":"notes/FullStack/JSON API/","text":"JSON API https://www.jsonstore.io/da0787aa5362aadf9c50997935e11ed8820e70cf324329124a1663e440f66498/","title":"JSON API"},{"location":"notes/FullStack/JSON API/#json-api","text":"https://www.jsonstore.io/da0787aa5362aadf9c50997935e11ed8820e70cf324329124a1663e440f66498/","title":"JSON API"},{"location":"notes/FullStack/React\ud83e\udd19Template/","text":"React Template \u5934\u6587\u4ef6 import React , { Component } from 'react' ; import ReactDOM from 'react-dom' ; setState\u63a5\u6536\u4e00\u4e2a\u53c2\u6570 handleClickOnLikeButton () { this.setState((prevState) => { return { count: 0 } }) this.setState((prevState) => { return { count: prevState.count + 1 } // \u4e0a\u4e00\u4e2a setState \u7684\u8fd4\u56de\u662f count \u4e3a 0\uff0c\u5f53\u524d\u8fd4\u56de 1 }) this.setState((prevState) => { return { count: prevState.count + 2 } // \u4e0a\u4e00\u4e2a setState \u7684\u8fd4\u56de\u662f count \u4e3a 1\uff0c\u5f53\u524d\u8fd4\u56de 3 }) // \u6700\u540e\u7684\u7ed3\u679c\u662f this.state.count \u4e3a 3 } ...","title":"React\ud83e\udd19Template"},{"location":"notes/FullStack/React\ud83e\udd19Template/#reacttemplate","text":"","title":"ReactTemplate"},{"location":"notes/FullStack/React\ud83e\udd19Template/#_1","text":"import React , { Component } from 'react' ; import ReactDOM from 'react-dom' ;","title":"\u5934\u6587\u4ef6"},{"location":"notes/FullStack/React\ud83e\udd19Template/#setstate","text":"handleClickOnLikeButton () { this.setState((prevState) => { return { count: 0 } }) this.setState((prevState) => { return { count: prevState.count + 1 } // \u4e0a\u4e00\u4e2a setState \u7684\u8fd4\u56de\u662f count \u4e3a 0\uff0c\u5f53\u524d\u8fd4\u56de 1 }) this.setState((prevState) => { return { count: prevState.count + 2 } // \u4e0a\u4e00\u4e2a setState \u7684\u8fd4\u56de\u662f count \u4e3a 1\uff0c\u5f53\u524d\u8fd4\u56de 3 }) // \u6700\u540e\u7684\u7ed3\u679c\u662f this.state.count \u4e3a 3 } ...","title":"setState\u63a5\u6536\u4e00\u4e2a\u53c2\u6570"},{"location":"notes/FullStack/React\ud83e\udd19\u751f\u547d\u5468\u671f/","text":"React \u751f\u547d\u5468\u671f Mount constructor() componentWillMount() render() \u6784\u9020DOM componentDidMount() UNMount componentWillUnmount()","title":"React\ud83e\udd19\u751f\u547d\u5468\u671f"},{"location":"notes/FullStack/React\ud83e\udd19\u751f\u547d\u5468\u671f/#react","text":"","title":"React\u751f\u547d\u5468\u671f"},{"location":"notes/FullStack/React\ud83e\udd19\u751f\u547d\u5468\u671f/#mount","text":"constructor() componentWillMount() render() \u6784\u9020DOM componentDidMount()","title":"Mount"},{"location":"notes/FullStack/React\ud83e\udd19\u751f\u547d\u5468\u671f/#unmount","text":"componentWillUnmount()","title":"UNMount"},{"location":"notes/FullStack/css/","text":"css Cascading Style Sheets single element p { color : red ; } Selecting multiple elements p , li , h1 { color : red ; }","title":"css"},{"location":"notes/FullStack/css/#css","text":"Cascading Style Sheets","title":"css"},{"location":"notes/FullStack/css/#single-element","text":"p { color : red ; }","title":"single element"},{"location":"notes/FullStack/css/#selecting-multiple-elements","text":"p , li , h1 { color : red ; }","title":"Selecting multiple elements"},{"location":"notes/FullStack/\u5b57\u4f53/","text":"\u5b57\u4f53 Karla Dank Mono","title":"\u5b57\u4f53"},{"location":"notes/FullStack/\u5b57\u4f53/#_1","text":"Karla Dank Mono","title":"\u5b57\u4f53"},{"location":"notes/IDE_Config/VS/","text":"VS Release\u8c03\u8bd5 1. \u6253\u5f00\u9879\u76ee\u5c5e\u6027 2. C++ => \u5e38\u89c4 => \u8c03\u8bd5\u4fe1\u606f\u683c\u5f0f \u9009 \u7a0b\u5e8f\u6570\u636e\u5e93(/Zi) 3. C++ => \u4f18\u5316 => \u4f18\u5316 \u9009 \u7981\u6b62\u4f18\u5316(/Od) 4. \u94fe\u63a5\u5668 => \u8c03\u8bd5 => \u751f\u6210\u8c03\u8bd5\u4fe1\u606f \u9009 \u662f(/Debug) \u8bbe\u7f6eC++\u7248\u672c 1. \u6253\u5f00\u9879\u76ee\u7684\u201c\u5c5e\u6027\u9875\u201d\u5bf9\u8bdd\u6846\u3002 2. \u9009\u62e9C/C++\uff0c \u9009\u62e9\u8bed\u8a00\u3002 3. \u5728C++\u8bed\u8a00\u6807\u51c6\u4e2d\uff0c\u4ece\u4e0b\u62c9\u63a7\u4ef6\u4e2d\u9009\u62e9\u652f\u6301\u7684\u8bed\u8a00\u6807\u51c6\uff0c\u7136\u540e\u9009\u62e9\u786e\u5b9a\u6216\u5e94\u7528\u4ee5\u4fdd\u5b58 \u60a8\u7684\u66f4\u6539\u3002","title":"VS"},{"location":"notes/IDE_Config/VS/#vs","text":"Release\u8c03\u8bd5 1. \u6253\u5f00\u9879\u76ee\u5c5e\u6027 2. C++ => \u5e38\u89c4 => \u8c03\u8bd5\u4fe1\u606f\u683c\u5f0f \u9009 \u7a0b\u5e8f\u6570\u636e\u5e93(/Zi) 3. C++ => \u4f18\u5316 => \u4f18\u5316 \u9009 \u7981\u6b62\u4f18\u5316(/Od) 4. \u94fe\u63a5\u5668 => \u8c03\u8bd5 => \u751f\u6210\u8c03\u8bd5\u4fe1\u606f \u9009 \u662f(/Debug) \u8bbe\u7f6eC++\u7248\u672c 1. \u6253\u5f00\u9879\u76ee\u7684\u201c\u5c5e\u6027\u9875\u201d\u5bf9\u8bdd\u6846\u3002 2. \u9009\u62e9C/C++\uff0c \u9009\u62e9\u8bed\u8a00\u3002 3. \u5728C++\u8bed\u8a00\u6807\u51c6\u4e2d\uff0c\u4ece\u4e0b\u62c9\u63a7\u4ef6\u4e2d\u9009\u62e9\u652f\u6301\u7684\u8bed\u8a00\u6807\u51c6\uff0c\u7136\u540e\u9009\u62e9\u786e\u5b9a\u6216\u5e94\u7528\u4ee5\u4fdd\u5b58 \u60a8\u7684\u66f4\u6539\u3002","title":"VS"},{"location":"notes/IDE_Config/boost/","text":"boost windows 7 \u5b89\u88c5\u76ee\u5f55 C:\\boost_1_17_0 include C:\\boost_1_71_0 lib C:\\boost_1_71_0\\stage\\lib macOS include /usr/local/Cellar/boost/1.69.0_2/include lib /usr/local/Cellar/boost/1.69.0_2/lib QT .pro\u6587\u4ef6\u914d\u7f6e INCLUDEPATH += / usr / local / Cellar / boost / 1.69.0 _2 / include LIBS += - L / usr / local / Cellar / boost / 1.69.0 _2 / lib - lboost_filesystem","title":"boost"},{"location":"notes/IDE_Config/boost/#boost","text":"","title":"boost"},{"location":"notes/IDE_Config/boost/#windows-7","text":"\u5b89\u88c5\u76ee\u5f55 C:\\boost_1_17_0 include C:\\boost_1_71_0 lib C:\\boost_1_71_0\\stage\\lib","title":"windows 7"},{"location":"notes/IDE_Config/boost/#macos","text":"include /usr/local/Cellar/boost/1.69.0_2/include lib /usr/local/Cellar/boost/1.69.0_2/lib","title":"macOS"},{"location":"notes/IDE_Config/boost/#qt-pro","text":"INCLUDEPATH += / usr / local / Cellar / boost / 1.69.0 _2 / include LIBS += - L / usr / local / Cellar / boost / 1.69.0 _2 / lib - lboost_filesystem","title":"QT .pro\u6587\u4ef6\u914d\u7f6e"},{"location":"notes/QT/QT\ud83e\udd19Json/","text":"QT Json QJsonObject QJsonArray \u6784\u9020 // \u5355\u4e2ajson\u5bf9\u8c61 QJsonObject object { { \"property1\" , 1 }, { \"property2\" , 2 } }; { property1: 1, property2: 2 } * QJsonArray QJsonArray flags { QJsonObject {{ \"flag1\" , ui -> checkBoxFlag1 -> isChecked ()}}, QJsonObject {{ \"flag4\" , ui -> checkBoxFlag4 -> isChecked ()}} }; \u8f6c\u6362 QJsonObject -> QString QJsonObject jsonObj ; // assume this has been populated with Json data QJsonDocument doc ( jsonObj ); QString strJson ( doc . toJson ( QJsonDocument :: Compact )); QJsonArray -> QString QJsonArray data ; QJsonDocument doc ; doc . setArray ( data ); QString dataToString ( doc . toJson ()); Reference \u89e3\u6790 Qt parsing JSON using QJsonDocument, QJsonObject, QJsonArray Qt\u4e4bJSON\u6559\u7a0b","title":"QT\ud83e\udd19Json"},{"location":"notes/QT/QT\ud83e\udd19Json/#qtjson","text":"QJsonObject QJsonArray","title":"QTJson"},{"location":"notes/QT/QT\ud83e\udd19Json/#_1","text":"// \u5355\u4e2ajson\u5bf9\u8c61 QJsonObject object { { \"property1\" , 1 }, { \"property2\" , 2 } }; { property1: 1, property2: 2 } * QJsonArray QJsonArray flags { QJsonObject {{ \"flag1\" , ui -> checkBoxFlag1 -> isChecked ()}}, QJsonObject {{ \"flag4\" , ui -> checkBoxFlag4 -> isChecked ()}} };","title":"\u6784\u9020"},{"location":"notes/QT/QT\ud83e\udd19Json/#_2","text":"QJsonObject -> QString QJsonObject jsonObj ; // assume this has been populated with Json data QJsonDocument doc ( jsonObj ); QString strJson ( doc . toJson ( QJsonDocument :: Compact )); QJsonArray -> QString QJsonArray data ; QJsonDocument doc ; doc . setArray ( data ); QString dataToString ( doc . toJson ());","title":"\u8f6c\u6362"},{"location":"notes/QT/QT\ud83e\udd19Json/#reference","text":"","title":"Reference"},{"location":"notes/QT/QT\ud83e\udd19Json/#_3","text":"Qt parsing JSON using QJsonDocument, QJsonObject, QJsonArray Qt\u4e4bJSON\u6559\u7a0b","title":"\u89e3\u6790"},{"location":"notes/QT/QT\ud83e\udd19Menu/","text":"QT Menu pull-down | context menu","title":"QT\ud83e\udd19Menu"},{"location":"notes/QT/QT\ud83e\udd19Menu/#qtmenu","text":"pull-down | context menu","title":"QTMenu"},{"location":"notes/QT/QT\ud83e\udd19QShortcut/","text":"QT QShortcut Basic Usage 1 QAction copyAct = new QAction ( tr ( \"&Copy\" ), this ); copyAct -> setShortcut ( QKeySequence ( \"Ctrl+Shift+F1\" )); connect ( copyAct , & QAction :: triggered , this , & MainWindow :: copy ); 2 QShortcut shortcut = new QShortcut ( QKeySequence ( \"Ctrl+Shift+F1\" ), this ); connect ( shortcut , & QShortcut :: activated , this , & Mainwindow :: copy );","title":"QT\ud83e\udd19QShortcut"},{"location":"notes/QT/QT\ud83e\udd19QShortcut/#qtqshortcut","text":"","title":"QTQShortcut"},{"location":"notes/QT/QT\ud83e\udd19QShortcut/#basic-usage","text":"1 QAction copyAct = new QAction ( tr ( \"&Copy\" ), this ); copyAct -> setShortcut ( QKeySequence ( \"Ctrl+Shift+F1\" )); connect ( copyAct , & QAction :: triggered , this , & MainWindow :: copy ); 2 QShortcut shortcut = new QShortcut ( QKeySequence ( \"Ctrl+Shift+F1\" ), this ); connect ( shortcut , & QShortcut :: activated , this , & Mainwindow :: copy );","title":"Basic Usage"}]}